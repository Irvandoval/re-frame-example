["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/lodash/partialRight.js"],"~:js","shadow$provide.module$node_modules$lodash$partialRight=function(global,require,module,exports){global=require(\"module$node_modules$lodash$_baseRest\");var createWrap=require(\"module$node_modules$lodash$_createWrap\"),getHolder=require(\"module$node_modules$lodash$_getHolder\"),replaceHolders=require(\"module$node_modules$lodash$_replaceHolders\"),partialRight=global(function(func,partials){var holders=replaceHolders(partials,getHolder(partialRight));return createWrap(func,64,void 0,partials,holders)});\npartialRight.placeholder={};module.exports=partialRight}","~:source","shadow$provide[\"module$node_modules$lodash$partialRight\"] = function(global,require,module,exports) {\nvar baseRest = require('./_baseRest'),\n    createWrap = require('./_createWrap'),\n    getHolder = require('./_getHolder'),\n    replaceHolders = require('./_replaceHolders');\n\n/** Used to compose bitmasks for function metadata. */\nvar WRAP_PARTIAL_RIGHT_FLAG = 64;\n\n/**\n * This method is like `_.partial` except that partially applied arguments\n * are appended to the arguments it receives.\n *\n * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic\n * builds, may be used as a placeholder for partially applied arguments.\n *\n * **Note:** This method doesn't set the \"length\" property of partially\n * applied functions.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Function\n * @param {Function} func The function to partially apply arguments to.\n * @param {...*} [partials] The arguments to be partially applied.\n * @returns {Function} Returns the new partially applied function.\n * @example\n *\n * function greet(greeting, name) {\n *   return greeting + ' ' + name;\n * }\n *\n * var greetFred = _.partialRight(greet, 'fred');\n * greetFred('hi');\n * // => 'hi fred'\n *\n * // Partially applied with placeholders.\n * var sayHelloTo = _.partialRight(greet, 'hello', _);\n * sayHelloTo('fred');\n * // => 'hello fred'\n */\nvar partialRight = baseRest(function(func, partials) {\n  var holders = replaceHolders(partials, getHolder(partialRight));\n  return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);\n});\n\n// Assign default placeholders.\npartialRight.placeholder = {};\n\nmodule.exports = partialRight;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$lodash$_baseRest","~$module$node_modules$lodash$_getHolder","~$shadow.js","~$module$node_modules$lodash$_createWrap","~$module$node_modules$lodash$_replaceHolders"]],"~:properties",["^5",["placeholder"]],"~:compiled-at",1567518500770,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$lodash$partialRight.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,wCAAA,CAA4D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAChGC,MAAAA,CAAWH,OAAA,CAAQ,sCAAR,CADqF,KAEhGI,WAAaJ,OAAA,CAAQ,wCAAR,CAFmF,CAGhGK,UAAYL,OAAA,CAAQ,uCAAR,CAHoF,CAIhGM,eAAiBN,OAAA,CAAQ,4CAAR,CAJ+E,CAyChGO,aAAeJ,MAAA,CAAS,QAAQ,CAACK,IAAD,CAAOC,QAAP,CAAiB,CACnD,IAAIC,QAAUJ,cAAA,CAAeG,QAAf,CAAyBJ,SAAA,CAAUE,YAAV,CAAzB,CACd,OAAOH,WAAA,CAAWI,IAAX,CApCqBG,EAoCrB,CAA0CC,IAAAA,EAA1C,CAAqDH,QAArD,CAA+DC,OAA/D,CAF4C,CAAlC,CAMnBH;YAAAM,YAAA,CAA2B,EAE3BZ,OAAAC,QAAA,CAAiBK,YAjDmF;\",\n\"sources\":[\"node_modules/lodash/partialRight.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$lodash$partialRight\\\"] = function(global,require,module,exports) {\\nvar baseRest = require('./_baseRest'),\\n    createWrap = require('./_createWrap'),\\n    getHolder = require('./_getHolder'),\\n    replaceHolders = require('./_replaceHolders');\\n\\n/** Used to compose bitmasks for function metadata. */\\nvar WRAP_PARTIAL_RIGHT_FLAG = 64;\\n\\n/**\\n * This method is like `_.partial` except that partially applied arguments\\n * are appended to the arguments it receives.\\n *\\n * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic\\n * builds, may be used as a placeholder for partially applied arguments.\\n *\\n * **Note:** This method doesn't set the \\\"length\\\" property of partially\\n * applied functions.\\n *\\n * @static\\n * @memberOf _\\n * @since 1.0.0\\n * @category Function\\n * @param {Function} func The function to partially apply arguments to.\\n * @param {...*} [partials] The arguments to be partially applied.\\n * @returns {Function} Returns the new partially applied function.\\n * @example\\n *\\n * function greet(greeting, name) {\\n *   return greeting + ' ' + name;\\n * }\\n *\\n * var greetFred = _.partialRight(greet, 'fred');\\n * greetFred('hi');\\n * // => 'hi fred'\\n *\\n * // Partially applied with placeholders.\\n * var sayHelloTo = _.partialRight(greet, 'hello', _);\\n * sayHelloTo('fred');\\n * // => 'hello fred'\\n */\\nvar partialRight = baseRest(function(func, partials) {\\n  var holders = replaceHolders(partials, getHolder(partialRight));\\n  return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);\\n});\\n\\n// Assign default placeholders.\\npartialRight.placeholder = {};\\n\\nmodule.exports = partialRight;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"baseRest\",\"createWrap\",\"getHolder\",\"replaceHolders\",\"partialRight\",\"func\",\"partials\",\"holders\",\"WRAP_PARTIAL_RIGHT_FLAG\",\"undefined\",\"placeholder\"]\n}\n"]