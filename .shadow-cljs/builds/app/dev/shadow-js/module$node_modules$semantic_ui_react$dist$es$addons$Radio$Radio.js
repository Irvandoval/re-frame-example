["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/semantic-ui-react/dist/es/addons/Radio/Radio.js"],"~:js","shadow$provide.module$node_modules$semantic_ui_react$dist$es$addons$Radio$Radio=function(global,require,module,exports){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{\"default\":obj}}function Radio(props){var slider=props.slider,toggle=props.toggle,type=props.type;props=(0,_lib.getUnhandledProps)(Radio,props);var radio=!(slider||toggle)||void 0;return _react[\"default\"].createElement(_Checkbox[\"default\"],(0,_extends2[\"default\"])({},props,{type:type,radio:radio,slider:slider,toggle:toggle}))}\nObject.defineProperty(exports,\"__esModule\",{value:!0});exports[\"default\"]=void 0;var _extends2=_interopRequireDefault(require(\"module$node_modules$$babel$runtime$helpers$extends\")),_react=_interopRequireDefault(require(\"module$node_modules$react$index\")),_lib=require(\"module$node_modules$semantic_ui_react$dist$es$lib$index\"),_Checkbox=_interopRequireDefault(require(\"module$node_modules$semantic_ui_react$dist$es$modules$Checkbox$index\"));Radio.handledProps=[\"slider\",\"toggle\",\"type\"];Radio.propTypes=\n{slider:_Checkbox[\"default\"].propTypes.slider,toggle:_Checkbox[\"default\"].propTypes.toggle,type:_Checkbox[\"default\"].propTypes.type};Radio.defaultProps={type:\"radio\"};exports[\"default\"]=Radio}","~:source","shadow$provide[\"module$node_modules$semantic_ui_react$dist$es$addons$Radio$Radio\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _lib = require(\"../../lib\");\n\nvar _Checkbox = _interopRequireDefault(require(\"../../modules/Checkbox\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/**\n * A Radio is sugar for <Checkbox radio />.\n * Useful for exclusive groups of sliders or toggles.\n * @see Checkbox\n * @see Form\n */\nfunction Radio(props) {\n  var slider = props.slider,\n      toggle = props.toggle,\n      type = props.type;\n  var rest = (0, _lib.getUnhandledProps)(Radio, props); // const ElementType = getElementType(Radio, props)\n  // radio, slider, toggle are exclusive\n  // use an undefined radio if slider or toggle are present\n\n  var radio = !(slider || toggle) || undefined;\n  return _react[\"default\"].createElement(_Checkbox[\"default\"], (0, _extends2[\"default\"])({}, rest, {\n    type: type,\n    radio: radio,\n    slider: slider,\n    toggle: toggle\n  }));\n}\n\nRadio.handledProps = [\"slider\", \"toggle\", \"type\"];\nRadio.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** Format to emphasize the current selection state. */\n  slider: _Checkbox[\"default\"].propTypes.slider,\n\n  /** Format to show an on or off choice. */\n  toggle: _Checkbox[\"default\"].propTypes.toggle,\n\n  /** HTML input type, either checkbox or radio. */\n  type: _Checkbox[\"default\"].propTypes.type\n} : {};\nRadio.defaultProps = {\n  type: 'radio'\n};\nvar _default = Radio;\nexports[\"default\"] = _default;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$react$index","~$shadow.js","~$module$node_modules$$babel$runtime$helpers$extends","~$module$node_modules$semantic_ui_react$dist$es$lib$index","~$module$node_modules$semantic_ui_react$dist$es$modules$Checkbox$index"]],"~:properties",["^5",["__esModule","slider","propTypes","value","radio","defaultProps","toggle","type","handledProps"]],"~:compiled-at",1567518500684,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$semantic_ui_react$dist$es$addons$Radio$Radio.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,iEAAA,CAAqF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAgB7HC,QAASA,uBAAsB,CAACC,GAAD,CAAM,CAAE,MAAOA,IAAA,EAAOA,GAAAC,WAAP,CAAwBD,GAAxB,CAA8B,CAAE,UAAWA,GAAb,CAAvC,CAQrCE,QAASA,MAAK,CAACC,KAAD,CAAQ,CAAA,IAChBC,OAASD,KAAAC,OADO,CAEhBC,OAASF,KAAAE,OAFO,CAGhBC,KAAOH,KAAAG,KACPC,MAAAA,CAAO,CAAC,CAAA,CAAGC,IAAAC,kBAAJ,EAA4BP,KAA5B,CAAmCC,KAAnC,CAIX,KAAIO,MAAQ,EAAEN,MAAF,EAAYC,MAAZ,CAARK,EAA+BC,IAAAA,EACnC,OAAOC,OAAA,CAAO,SAAP,CAAAC,cAAA,CAAgCC,SAAA,CAAU,SAAV,CAAhC,CAAsD,CAAC,CAAA,CAAGC,SAAA,CAAU,SAAV,CAAJ,EAA0B,EAA1B,CAA8BR,KAA9B,CAAoC,CAC/FD,KAAMA,IADyF,CAE/FI,MAAOA,KAFwF,CAG/FN,OAAQA,MAHuF,CAI/FC,OAAQA,MAJuF,CAApC,CAAtD,CATa;AArBtBW,MAAAC,eAAA,CAAsBnB,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CoB,MAAO,CAAA,CADoC,CAA7C,CAGApB,QAAA,CAAQ,SAAR,CAAA,CAAqB,IAAK,EAE1B,KAAIiB,UAAYhB,sBAAA,CAAuBH,OAAA,CAAQ,oDAAR,CAAvB,CAAhB,CAEIgB,OAASb,sBAAA,CAAuBH,OAAA,CAAQ,iCAAR,CAAvB,CAFb,CAIIY,KAAOZ,OAAA,CAAQ,yDAAR,CAJX,CAMIkB,UAAYf,sBAAA,CAAuBH,OAAA,CAAQ,sEAAR,CAAvB,CA2BhBM,MAAAiB,aAAA,CAAqB,CAAC,QAAD,CAAW,QAAX,CAAqB,MAArB,CACrBjB,MAAAkB,UAAA;AAA0D,CAExDhB,OAAQU,SAAA,CAAU,SAAV,CAAAM,UAAAhB,OAFgD,CAKxDC,OAAQS,SAAA,CAAU,SAAV,CAAAM,UAAAf,OALgD,CAQxDC,KAAMQ,SAAA,CAAU,SAAV,CAAAM,UAAAd,KARkD,CAU1DJ,MAAAmB,aAAA,CAAqB,CACnBf,KAAM,OADa,CAIrBR,QAAA,CAAQ,SAAR,CAAA,CADeI,KAvD8G;\",\n\"sources\":[\"node_modules/semantic-ui-react/dist/es/addons/Radio/Radio.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$semantic_ui_react$dist$es$addons$Radio$Radio\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports[\\\"default\\\"] = void 0;\\n\\nvar _extends2 = _interopRequireDefault(require(\\\"@babel/runtime/helpers/extends\\\"));\\n\\nvar _react = _interopRequireDefault(require(\\\"react\\\"));\\n\\nvar _lib = require(\\\"../../lib\\\");\\n\\nvar _Checkbox = _interopRequireDefault(require(\\\"../../modules/Checkbox\\\"));\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \\\"default\\\": obj }; }\\n\\n/**\\n * A Radio is sugar for <Checkbox radio />.\\n * Useful for exclusive groups of sliders or toggles.\\n * @see Checkbox\\n * @see Form\\n */\\nfunction Radio(props) {\\n  var slider = props.slider,\\n      toggle = props.toggle,\\n      type = props.type;\\n  var rest = (0, _lib.getUnhandledProps)(Radio, props); // const ElementType = getElementType(Radio, props)\\n  // radio, slider, toggle are exclusive\\n  // use an undefined radio if slider or toggle are present\\n\\n  var radio = !(slider || toggle) || undefined;\\n  return _react[\\\"default\\\"].createElement(_Checkbox[\\\"default\\\"], (0, _extends2[\\\"default\\\"])({}, rest, {\\n    type: type,\\n    radio: radio,\\n    slider: slider,\\n    toggle: toggle\\n  }));\\n}\\n\\nRadio.handledProps = [\\\"slider\\\", \\\"toggle\\\", \\\"type\\\"];\\nRadio.propTypes = process.env.NODE_ENV !== \\\"production\\\" ? {\\n  /** Format to emphasize the current selection state. */\\n  slider: _Checkbox[\\\"default\\\"].propTypes.slider,\\n\\n  /** Format to show an on or off choice. */\\n  toggle: _Checkbox[\\\"default\\\"].propTypes.toggle,\\n\\n  /** HTML input type, either checkbox or radio. */\\n  type: _Checkbox[\\\"default\\\"].propTypes.type\\n} : {};\\nRadio.defaultProps = {\\n  type: 'radio'\\n};\\nvar _default = Radio;\\nexports[\\\"default\\\"] = _default;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"_interopRequireDefault\",\"obj\",\"__esModule\",\"Radio\",\"props\",\"slider\",\"toggle\",\"type\",\"rest\",\"_lib\",\"getUnhandledProps\",\"radio\",\"undefined\",\"_react\",\"createElement\",\"_Checkbox\",\"_extends2\",\"Object\",\"defineProperty\",\"value\",\"handledProps\",\"propTypes\",\"defaultProps\"]\n}\n"]